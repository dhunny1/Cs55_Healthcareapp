{"ast":null,"code":"import { openDB } from 'idb';\nexport const openDatabase = async () => {\n  try {\n    const dbPromise = openDB('myDatabase', 1, {\n      upgrade(db) {\n        const store = db.createObjectStore('users', {\n          keyPath: 'username'\n        });\n        store.createIndex('username', 'username', {\n          unique: true\n        });\n      }\n    });\n    return db; // Return the database object directly\n  } catch (error) {\n    console.error(\"Error opening database:\", error);\n    throw error; // Re-throw the error for handling in the calling function\n  }\n};\nexport const registerUser = async (username, password) => {\n  const db = await openDatabase();\n  const tx = db.transaction('users', 'readwrite');\n  const store = tx.objectStore('users');\n  store.add({\n    username,\n    password: hashPassword(password)\n  }); // Hash password before storing\n  return tx.complete;\n};\nexport const loginUser = async (username, password) => {\n  const db = await openDatabase();\n  const tx = db.transaction('users', 'readonly');\n  const store = tx.objectStore('users');\n  const user = await store.get(username);\n  if (user && verifyPassword(password, user.password)) {\n    return true; // Successful login\n  } else {\n    return false; // Invalid credentials\n  }\n};\n\n// Implement functions to hash and verify passwords (replace with your chosen hashing algorithm)\nfunction hashPassword(password) {\n  // Implement password hashing logic here (e.g., using bcrypt)\n  return \"hashedPassword\"; // Placeholder for actual hashed password\n}\nfunction verifyPassword(password, hashedPassword) {\n  // Implement password verification using the chosen hashing algorithm\n  return true; // Placeholder for actual verification logic\n}","map":{"version":3,"names":["openDB","openDatabase","dbPromise","upgrade","db","store","createObjectStore","keyPath","createIndex","unique","error","console","registerUser","username","password","tx","transaction","objectStore","add","hashPassword","complete","loginUser","user","get","verifyPassword","hashedPassword"],"sources":["C:/Users/Hjayb/OneDrive/Desktop/MyClass/Fall2024/InPersonClassess/CMSC355_FundamentalsSoftwareEngineer/Sprint2/healthcare_app/src/API/db.js"],"sourcesContent":["import { openDB } from 'idb';\r\n\r\nexport const openDatabase = async () => {\r\n  try {\r\n    const dbPromise = openDB('myDatabase', 1, { upgrade(db) { const store = db.createObjectStore('users', { keyPath: 'username' }); store.createIndex('username', 'username', { unique: true }); }, });\r\n    return db; // Return the database object directly\r\n  } catch (error) {\r\n    console.error(\"Error opening database:\", error);\r\n    throw error; // Re-throw the error for handling in the calling function\r\n  }\r\n};\r\n\r\nexport const registerUser = async (username, password) => {\r\n  const db = await openDatabase();\r\n  const tx = db.transaction('users', 'readwrite');\r\n  const store = tx.objectStore('users');\r\n  store.add({ username, password: hashPassword(password) }); // Hash password before storing\r\n  return tx.complete;\r\n};\r\n\r\nexport const loginUser = async (username, password) => {\r\n  const db = await openDatabase();\r\n  const tx = db.transaction('users', 'readonly');\r\n  const store = tx.objectStore('users');\r\n  const user = await store.get(username);\r\n  if (user && verifyPassword(password, user.password)) {\r\n    return true; // Successful login\r\n  } else {\r\n    return false; // Invalid credentials\r\n  }\r\n};\r\n\r\n// Implement functions to hash and verify passwords (replace with your chosen hashing algorithm)\r\nfunction hashPassword(password) {\r\n  // Implement password hashing logic here (e.g., using bcrypt)\r\n  return \"hashedPassword\"; // Placeholder for actual hashed password\r\n}\r\n\r\nfunction verifyPassword(password, hashedPassword) {\r\n  // Implement password verification using the chosen hashing algorithm\r\n  return true; // Placeholder for actual verification logic\r\n}"],"mappings":"AAAA,SAASA,MAAM,QAAQ,KAAK;AAE5B,OAAO,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;EACtC,IAAI;IACF,MAAMC,SAAS,GAAGF,MAAM,CAAC,YAAY,EAAE,CAAC,EAAE;MAAEG,OAAOA,CAACC,EAAE,EAAE;QAAE,MAAMC,KAAK,GAAGD,EAAE,CAACE,iBAAiB,CAAC,OAAO,EAAE;UAAEC,OAAO,EAAE;QAAW,CAAC,CAAC;QAAEF,KAAK,CAACG,WAAW,CAAC,UAAU,EAAE,UAAU,EAAE;UAAEC,MAAM,EAAE;QAAK,CAAC,CAAC;MAAE;IAAG,CAAC,CAAC;IAClM,OAAOL,EAAE,CAAC,CAAC;EACb,CAAC,CAAC,OAAOM,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,MAAMA,KAAK,CAAC,CAAC;EACf;AACF,CAAC;AAED,OAAO,MAAME,YAAY,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,QAAQ,KAAK;EACxD,MAAMV,EAAE,GAAG,MAAMH,YAAY,CAAC,CAAC;EAC/B,MAAMc,EAAE,GAAGX,EAAE,CAACY,WAAW,CAAC,OAAO,EAAE,WAAW,CAAC;EAC/C,MAAMX,KAAK,GAAGU,EAAE,CAACE,WAAW,CAAC,OAAO,CAAC;EACrCZ,KAAK,CAACa,GAAG,CAAC;IAAEL,QAAQ;IAAEC,QAAQ,EAAEK,YAAY,CAACL,QAAQ;EAAE,CAAC,CAAC,CAAC,CAAC;EAC3D,OAAOC,EAAE,CAACK,QAAQ;AACpB,CAAC;AAED,OAAO,MAAMC,SAAS,GAAG,MAAAA,CAAOR,QAAQ,EAAEC,QAAQ,KAAK;EACrD,MAAMV,EAAE,GAAG,MAAMH,YAAY,CAAC,CAAC;EAC/B,MAAMc,EAAE,GAAGX,EAAE,CAACY,WAAW,CAAC,OAAO,EAAE,UAAU,CAAC;EAC9C,MAAMX,KAAK,GAAGU,EAAE,CAACE,WAAW,CAAC,OAAO,CAAC;EACrC,MAAMK,IAAI,GAAG,MAAMjB,KAAK,CAACkB,GAAG,CAACV,QAAQ,CAAC;EACtC,IAAIS,IAAI,IAAIE,cAAc,CAACV,QAAQ,EAAEQ,IAAI,CAACR,QAAQ,CAAC,EAAE;IACnD,OAAO,IAAI,CAAC,CAAC;EACf,CAAC,MAAM;IACL,OAAO,KAAK,CAAC,CAAC;EAChB;AACF,CAAC;;AAED;AACA,SAASK,YAAYA,CAACL,QAAQ,EAAE;EAC9B;EACA,OAAO,gBAAgB,CAAC,CAAC;AAC3B;AAEA,SAASU,cAAcA,CAACV,QAAQ,EAAEW,cAAc,EAAE;EAChD;EACA,OAAO,IAAI,CAAC,CAAC;AACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}