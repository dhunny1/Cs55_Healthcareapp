{"ast":null,"code":"import { openDB } from 'idb';\nimport bcrypt from 'bcryptjs'; // Ensure bcrypt is correctly installed and imported\n\n// Open the IndexedDB\nconst openDatabase = async () => {\n  try {\n    const db = await openDB('myDatabase', 1, upgradeDb => {\n      if (!upgradeDb.objectStoreNames.contains('users')) {\n        const objectStore = upgradeDb.createObjectStore('users', {\n          keyPath: 'username'\n        });\n        objectStore.createIndex('username', 'username', {\n          unique: true\n        });\n      }\n    });\n    return db;\n  } catch (error) {\n    console.error(\"Error opening database:\", error);\n    throw error; // Re-throw the error for handling in the calling function\n  }\n};\n\n// Register the user with password hashing\nexport const registerUser = async (username, password) => {\n  try {\n    // Hash the password before storing it\n    const hashedPassword = hashPassword(password);\n    const db = await openDatabase();\n    const tx = db.transaction('users', 'readwrite');\n    const store = tx.objectStore('users');\n\n    // Store the username and hashed password\n    await store.add({\n      username,\n      password: hashedPassword\n    });\n    await tx.done;\n    console.log(\"User registered successfully:\", username);\n  } catch (error) {\n    console.error(\"Error registering user:\", error);\n    throw error;\n  }\n};\n\n// Function to hash the password using bcrypt\nfunction hashPassword(password) {\n  const salt = bcrypt.genSaltSync(10);\n  return bcrypt.hashSync(password, salt); // Hash the password with bcrypt\n}\n\n// Function to login the user by verifying password\nexport const loginUser = async (username, password) => {\n  try {\n    const db = await openDatabase();\n    const tx = db.transaction('users', 'readonly');\n    const store = tx.objectStore('users');\n    const user = await store.get(username); // Get the user by username\n\n    if (user && verifyPassword(password, user.password)) {\n      console.log(\"Login successful!\");\n      return true; // Successful login\n    } else {\n      console.log(\"Invalid credentials\");\n      return false; // Invalid credentials\n    }\n  } catch (error) {\n    console.error(\"Error logging in:\", error);\n    throw error;\n  }\n};\n\n// Function to verify the password using bcrypt\nfunction verifyPassword(password, hashedPassword) {\n  return bcrypt.compareSync(password, hashedPassword); // Compare the entered password with the stored hashed password\n}","map":{"version":3,"names":["openDB","bcrypt","openDatabase","db","upgradeDb","objectStoreNames","contains","objectStore","createObjectStore","keyPath","createIndex","unique","error","console","registerUser","username","password","hashedPassword","hashPassword","tx","transaction","store","add","done","log","salt","genSaltSync","hashSync","loginUser","user","get","verifyPassword","compareSync"],"sources":["C:/Users/Hjayb/OneDrive/Desktop/MyClass/Fall2024/InPersonClassess/CMSC355_FundamentalsSoftwareEngineer/Sprint2/healthcare_app/src/API/db.js"],"sourcesContent":["import { openDB } from 'idb';\r\nimport bcrypt from 'bcryptjs'; // Ensure bcrypt is correctly installed and imported\r\n\r\n// Open the IndexedDB\r\nconst openDatabase = async () => {\r\n  try {\r\n    const db = await openDB('myDatabase', 1, (upgradeDb) => {\r\n      if (!upgradeDb.objectStoreNames.contains('users')) {\r\n        const objectStore = upgradeDb.createObjectStore('users', { keyPath: 'username' });\r\n        objectStore.createIndex('username', 'username', { unique: true });\r\n      }\r\n    });\r\n    return db;\r\n  } catch (error) {\r\n    console.error(\"Error opening database:\", error);\r\n    throw error; // Re-throw the error for handling in the calling function\r\n  }\r\n};\r\n\r\n// Register the user with password hashing\r\nexport const registerUser = async (username, password) => {\r\n  try {\r\n    // Hash the password before storing it\r\n    const hashedPassword = hashPassword(password);\r\n    \r\n    const db = await openDatabase();\r\n    const tx = db.transaction('users', 'readwrite');\r\n    const store = tx.objectStore('users');\r\n    \r\n    // Store the username and hashed password\r\n    await store.add({ username, password: hashedPassword });\r\n    await tx.done;\r\n\r\n    console.log(\"User registered successfully:\", username);\r\n  } catch (error) {\r\n    console.error(\"Error registering user:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Function to hash the password using bcrypt\r\nfunction hashPassword(password) {\r\n  const salt = bcrypt.genSaltSync(10);\r\n  return bcrypt.hashSync(password, salt); // Hash the password with bcrypt\r\n}\r\n\r\n// Function to login the user by verifying password\r\nexport const loginUser = async (username, password) => {\r\n    try {\r\n      const db = await openDatabase();\r\n      const tx = db.transaction('users', 'readonly');\r\n      const store = tx.objectStore('users');\r\n      const user = await store.get(username); // Get the user by username\r\n  \r\n      if (user && verifyPassword(password, user.password)) {\r\n        console.log(\"Login successful!\");\r\n        return true; // Successful login\r\n      } else {\r\n        console.log(\"Invalid credentials\");\r\n        return false; // Invalid credentials\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error logging in:\", error);\r\n      throw error;\r\n    }\r\n  };\r\n  \r\n  // Function to verify the password using bcrypt\r\n  function verifyPassword(password, hashedPassword) {\r\n    return bcrypt.compareSync(password, hashedPassword); // Compare the entered password with the stored hashed password\r\n  }\r\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}