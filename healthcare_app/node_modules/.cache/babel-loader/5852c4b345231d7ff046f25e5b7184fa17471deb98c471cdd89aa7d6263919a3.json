{"ast":null,"code":"import idb from 'idb';\nconst dbPromise = idb.open('myDatabase', 1, upgradeDb => {\n  const objectStore = upgradeDb.createObjectStore('users', {\n    keyPath: 'username'\n  });\n  objectStore.createIndex('username', 'username', {\n    unique: true\n  });\n});\nasync function registerUser(username, password) {\n  await dbPromise.then(db => {\n    const tx = db.transaction('users', 'readwrite');\n    const store = tx.objectStore('users');\n    store.add({\n      username,\n      password\n    });\n    return tx.complete;\n  });\n}\nasync function loginUser(username, password) {\n  return dbPromise.then(db => {\n    const tx = db.transaction('users', 'readonly');\n    const store = tx.objectStore('users');\n    const user = store.get(username);\n    return user.then(user => {\n      if (user && user.password === password) {\n        return true; // Successful login\n      } else {\n        return false; // Invalid credentials\n      }\n    });\n  });\n}","map":{"version":3,"names":["idb","dbPromise","open","upgradeDb","objectStore","createObjectStore","keyPath","createIndex","unique","registerUser","username","password","then","db","tx","transaction","store","add","complete","loginUser","user","get"],"sources":["C:/Users/Hjayb/OneDrive/Desktop/MyClass/Fall2024/InPersonClassess/CMSC355_FundamentalsSoftwareEngineer/Sprint2/healthcare_app/src/API/db.js"],"sourcesContent":["import idb from 'idb';\r\n\r\nconst dbPromise = idb.open('myDatabase', 1, (upgradeDb) => {\r\n    const objectStore = upgradeDb.createObjectStore('users', { keyPath: 'username' });\r\n    objectStore.createIndex('username', 'username', { unique: true });\r\n  });\r\n  \r\n  async function registerUser(username, password) {\r\n    await dbPromise.then(db => {\r\n      const tx = db.transaction('users', 'readwrite');\r\n      const store = tx.objectStore('users');\r\n      store.add({ username, password });\r\n      return tx.complete;\r\n    });\r\n  }\r\n  \r\n  async function loginUser(username, password) {\r\n    return dbPromise.then(db => {\r\n      const tx = db.transaction('users', 'readonly');\r\n      const store = tx.objectStore('users');\r\n      const user = store.get(username);\r\n      return user.then(user => {\r\n        if (user && user.password === password) {\r\n          return true; // Successful login\r\n        } else {\r\n          return false; // Invalid credentials\r\n        }\r\n      });\r\n    });\r\n  }"],"mappings":"AAAA,OAAOA,GAAG,MAAM,KAAK;AAErB,MAAMC,SAAS,GAAGD,GAAG,CAACE,IAAI,CAAC,YAAY,EAAE,CAAC,EAAGC,SAAS,IAAK;EACvD,MAAMC,WAAW,GAAGD,SAAS,CAACE,iBAAiB,CAAC,OAAO,EAAE;IAAEC,OAAO,EAAE;EAAW,CAAC,CAAC;EACjFF,WAAW,CAACG,WAAW,CAAC,UAAU,EAAE,UAAU,EAAE;IAAEC,MAAM,EAAE;EAAK,CAAC,CAAC;AACnE,CAAC,CAAC;AAEF,eAAeC,YAAYA,CAACC,QAAQ,EAAEC,QAAQ,EAAE;EAC9C,MAAMV,SAAS,CAACW,IAAI,CAACC,EAAE,IAAI;IACzB,MAAMC,EAAE,GAAGD,EAAE,CAACE,WAAW,CAAC,OAAO,EAAE,WAAW,CAAC;IAC/C,MAAMC,KAAK,GAAGF,EAAE,CAACV,WAAW,CAAC,OAAO,CAAC;IACrCY,KAAK,CAACC,GAAG,CAAC;MAAEP,QAAQ;MAAEC;IAAS,CAAC,CAAC;IACjC,OAAOG,EAAE,CAACI,QAAQ;EACpB,CAAC,CAAC;AACJ;AAEA,eAAeC,SAASA,CAACT,QAAQ,EAAEC,QAAQ,EAAE;EAC3C,OAAOV,SAAS,CAACW,IAAI,CAACC,EAAE,IAAI;IAC1B,MAAMC,EAAE,GAAGD,EAAE,CAACE,WAAW,CAAC,OAAO,EAAE,UAAU,CAAC;IAC9C,MAAMC,KAAK,GAAGF,EAAE,CAACV,WAAW,CAAC,OAAO,CAAC;IACrC,MAAMgB,IAAI,GAAGJ,KAAK,CAACK,GAAG,CAACX,QAAQ,CAAC;IAChC,OAAOU,IAAI,CAACR,IAAI,CAACQ,IAAI,IAAI;MACvB,IAAIA,IAAI,IAAIA,IAAI,CAACT,QAAQ,KAAKA,QAAQ,EAAE;QACtC,OAAO,IAAI,CAAC,CAAC;MACf,CAAC,MAAM;QACL,OAAO,KAAK,CAAC,CAAC;MAChB;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}