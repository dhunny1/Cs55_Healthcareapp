{"ast":null,"code":"import { openDB } from 'idb';\nimport bcrypt from 'bcryptjs';\nexport const openDatabase = async () => {\n  try {\n    const db = await openDB('myDatabase', 1, upgradeDb => {\n      const objectStore = upgradeDb.createObjectStore('users', {\n        keyPath: 'username'\n      });\n      objectStore.createIndex('username', 'username', {\n        unique: true\n      });\n    });\n    return db; // Return the database object directly\n  } catch (error) {\n    console.error(\"Error opening database:\", error);\n    throw error; // Re-throw the error for handling in the calling function\n  }\n};\nexport const registerUser = async (username, password) => {\n  const db = await openDatabase();\n  const tx = db.transaction('users', 'readwrite');\n  const store = tx.objectStore('users');\n  store.add({\n    username,\n    password: hashPassword(password)\n  }); // Hash password before storing\n  return tx.complete;\n};\nexport const loginUser = async (username, password) => {\n  const db = await openDatabase();\n  const tx = db.transaction('users', 'readonly');\n  const store = tx.objectStore('users');\n  const user = await store.get(username);\n  if (user && verifyPassword(password, user.password)) {\n    return true; // Successful login\n  } else {\n    return false; // Invalid credentials\n  }\n};\n\n// Implement functions to hash and verify passwords (replace with your chosen hashing algorithm)\nfunction hashPassword(password) {\n  const salt = bcrypt.genSaltSync(10);\n  return bcrypt.hashSync(password, salt);\n}\nfunction verifyPassword(password, hashedPassword) {\n  return bcrypt.compareSync(password, hashedPassword);\n}","map":{"version":3,"names":["openDB","bcrypt","openDatabase","db","upgradeDb","objectStore","createObjectStore","keyPath","createIndex","unique","error","console","registerUser","username","password","tx","transaction","store","add","hashPassword","complete","loginUser","user","get","verifyPassword","salt","genSaltSync","hashSync","hashedPassword","compareSync"],"sources":["C:/Users/Hjayb/OneDrive/Desktop/MyClass/Fall2024/InPersonClassess/CMSC355_FundamentalsSoftwareEngineer/Sprint2/healthcare_app/src/API/db.js"],"sourcesContent":["import { openDB } from 'idb';\r\nimport bcrypt from 'bcryptjs';\r\n\r\nexport const openDatabase = async () => {\r\n  try {\r\n    const db = await openDB('myDatabase', 1, (upgradeDb) => {\r\n      const objectStore = upgradeDb.createObjectStore('users', { keyPath: 'username' });\r\n      objectStore.createIndex('username', 'username', { unique: true });\r\n    });\r\n    return db; // Return the database object directly\r\n  } catch (error) {\r\n    console.error(\"Error opening database:\", error);\r\n    throw error; // Re-throw the error for handling in the calling function\r\n  }\r\n};\r\n\r\nexport const registerUser = async (username, password) => {\r\n  const db = await openDatabase();\r\n  const tx = db.transaction('users', 'readwrite');\r\n  const store = tx.objectStore('users');\r\n  store.add({ username, password: hashPassword(password) }); // Hash password before storing\r\n  return tx.complete;\r\n};\r\n\r\nexport const loginUser = async (username, password) => {\r\n  const db = await openDatabase();\r\n  const tx = db.transaction('users', 'readonly');\r\n  const store = tx.objectStore('users');\r\n  const user = await store.get(username);\r\n  if (user && verifyPassword(password, user.password)) {\r\n    return true; // Successful login\r\n  } else {\r\n    return false; // Invalid credentials\r\n  }\r\n};\r\n\r\n// Implement functions to hash and verify passwords (replace with your chosen hashing algorithm)\r\nfunction hashPassword(password) {\r\n    const salt = bcrypt.genSaltSync(10);\r\n    return bcrypt.hashSync(password, salt);\r\n  }\r\n  \r\n  function verifyPassword(password, hashedPassword) {\r\n    return bcrypt.compareSync(password, hashedPassword);\r\n  }"],"mappings":"AAAA,SAASA,MAAM,QAAQ,KAAK;AAC5B,OAAOC,MAAM,MAAM,UAAU;AAE7B,OAAO,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;EACtC,IAAI;IACF,MAAMC,EAAE,GAAG,MAAMH,MAAM,CAAC,YAAY,EAAE,CAAC,EAAGI,SAAS,IAAK;MACtD,MAAMC,WAAW,GAAGD,SAAS,CAACE,iBAAiB,CAAC,OAAO,EAAE;QAAEC,OAAO,EAAE;MAAW,CAAC,CAAC;MACjFF,WAAW,CAACG,WAAW,CAAC,UAAU,EAAE,UAAU,EAAE;QAAEC,MAAM,EAAE;MAAK,CAAC,CAAC;IACnE,CAAC,CAAC;IACF,OAAON,EAAE,CAAC,CAAC;EACb,CAAC,CAAC,OAAOO,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,MAAMA,KAAK,CAAC,CAAC;EACf;AACF,CAAC;AAED,OAAO,MAAME,YAAY,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,QAAQ,KAAK;EACxD,MAAMX,EAAE,GAAG,MAAMD,YAAY,CAAC,CAAC;EAC/B,MAAMa,EAAE,GAAGZ,EAAE,CAACa,WAAW,CAAC,OAAO,EAAE,WAAW,CAAC;EAC/C,MAAMC,KAAK,GAAGF,EAAE,CAACV,WAAW,CAAC,OAAO,CAAC;EACrCY,KAAK,CAACC,GAAG,CAAC;IAAEL,QAAQ;IAAEC,QAAQ,EAAEK,YAAY,CAACL,QAAQ;EAAE,CAAC,CAAC,CAAC,CAAC;EAC3D,OAAOC,EAAE,CAACK,QAAQ;AACpB,CAAC;AAED,OAAO,MAAMC,SAAS,GAAG,MAAAA,CAAOR,QAAQ,EAAEC,QAAQ,KAAK;EACrD,MAAMX,EAAE,GAAG,MAAMD,YAAY,CAAC,CAAC;EAC/B,MAAMa,EAAE,GAAGZ,EAAE,CAACa,WAAW,CAAC,OAAO,EAAE,UAAU,CAAC;EAC9C,MAAMC,KAAK,GAAGF,EAAE,CAACV,WAAW,CAAC,OAAO,CAAC;EACrC,MAAMiB,IAAI,GAAG,MAAML,KAAK,CAACM,GAAG,CAACV,QAAQ,CAAC;EACtC,IAAIS,IAAI,IAAIE,cAAc,CAACV,QAAQ,EAAEQ,IAAI,CAACR,QAAQ,CAAC,EAAE;IACnD,OAAO,IAAI,CAAC,CAAC;EACf,CAAC,MAAM;IACL,OAAO,KAAK,CAAC,CAAC;EAChB;AACF,CAAC;;AAED;AACA,SAASK,YAAYA,CAACL,QAAQ,EAAE;EAC5B,MAAMW,IAAI,GAAGxB,MAAM,CAACyB,WAAW,CAAC,EAAE,CAAC;EACnC,OAAOzB,MAAM,CAAC0B,QAAQ,CAACb,QAAQ,EAAEW,IAAI,CAAC;AACxC;AAEA,SAASD,cAAcA,CAACV,QAAQ,EAAEc,cAAc,EAAE;EAChD,OAAO3B,MAAM,CAAC4B,WAAW,CAACf,QAAQ,EAAEc,cAAc,CAAC;AACrD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}