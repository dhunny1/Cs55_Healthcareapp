{"ast":null,"code":"// db.js\n\nimport { openDB } from 'idb';\n\n// Open or create the database\nexport const openDatabase = async () => {\n  const db = await openDB('myDatabase', 1, {\n    upgrade(db) {\n      if (!db.objectStoreNames.contains('users')) {\n        const objectStore = db.createObjectStore('users', {\n          keyPath: 'username'\n        });\n        objectStore.createIndex('username', 'username', {\n          unique: true\n        });\n      }\n    }\n  });\n  return db;\n};\n\n// Function to register a user in the database\nexport const registerUser = async (username, password) => {\n  const db = await openDatabase();\n  const tx = db.transaction('users', 'readwrite');\n  const store = tx.objectStore('users');\n\n  // Check if username already exists (constraint violation)\n  try {\n    await store.add({\n      username,\n      password\n    });\n    await tx.done;\n    console.log(\"User registered successfully\");\n  } catch (error) {\n    console.error(\"Error registering user:\", error);\n    throw error; // Propagate the error for handling\n  }\n};\n\n// Function to validate user credentials during login\nexport const loginUser = async (username, password) => {\n  const db = await openDatabase();\n  const tx = db.transaction('users', 'readonly');\n  const store = tx.objectStore('users');\n  const user = await store.get(username);\n\n  // Check if user exists and password matches\n  if (user && user.password === password) {\n    return true; // Successful login\n  } else {\n    return false; // Invalid username or password\n  }\n};","map":{"version":3,"names":["openDB","openDatabase","db","upgrade","objectStoreNames","contains","objectStore","createObjectStore","keyPath","createIndex","unique","registerUser","username","password","tx","transaction","store","add","done","console","log","error","loginUser","user","get"],"sources":["C:/Users/Hjayb/OneDrive/Desktop/MyClass/Fall2024/InPersonClassess/CMSC355_FundamentalsSoftwareEngineer/Sprint2/healthcare_app/src/API/db.js"],"sourcesContent":["// db.js\r\n\r\nimport { openDB } from 'idb';\r\n\r\n// Open or create the database\r\nexport const openDatabase = async () => {\r\n  const db = await openDB('myDatabase', 1, {\r\n    upgrade(db) {\r\n      if (!db.objectStoreNames.contains('users')) {\r\n        const objectStore = db.createObjectStore('users', { keyPath: 'username' });\r\n        objectStore.createIndex('username', 'username', { unique: true });\r\n      }\r\n    },\r\n  });\r\n  return db;\r\n};\r\n\r\n// Function to register a user in the database\r\nexport const registerUser = async (username, password) => {\r\n  const db = await openDatabase();\r\n\r\n  const tx = db.transaction('users', 'readwrite');\r\n  const store = tx.objectStore('users');\r\n\r\n  // Check if username already exists (constraint violation)\r\n  try {\r\n    await store.add({ username, password });\r\n    await tx.done;\r\n    console.log(\"User registered successfully\");\r\n  } catch (error) {\r\n    console.error(\"Error registering user:\", error);\r\n    throw error; // Propagate the error for handling\r\n  }\r\n};\r\n\r\n// Function to validate user credentials during login\r\nexport const loginUser = async (username, password) => {\r\n  const db = await openDatabase();\r\n  const tx = db.transaction('users', 'readonly');\r\n  const store = tx.objectStore('users');\r\n  \r\n  const user = await store.get(username);\r\n\r\n  // Check if user exists and password matches\r\n  if (user && user.password === password) {\r\n    return true;  // Successful login\r\n  } else {\r\n    return false; // Invalid username or password\r\n  }\r\n};\r\n"],"mappings":"AAAA;;AAEA,SAASA,MAAM,QAAQ,KAAK;;AAE5B;AACA,OAAO,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;EACtC,MAAMC,EAAE,GAAG,MAAMF,MAAM,CAAC,YAAY,EAAE,CAAC,EAAE;IACvCG,OAAOA,CAACD,EAAE,EAAE;MACV,IAAI,CAACA,EAAE,CAACE,gBAAgB,CAACC,QAAQ,CAAC,OAAO,CAAC,EAAE;QAC1C,MAAMC,WAAW,GAAGJ,EAAE,CAACK,iBAAiB,CAAC,OAAO,EAAE;UAAEC,OAAO,EAAE;QAAW,CAAC,CAAC;QAC1EF,WAAW,CAACG,WAAW,CAAC,UAAU,EAAE,UAAU,EAAE;UAAEC,MAAM,EAAE;QAAK,CAAC,CAAC;MACnE;IACF;EACF,CAAC,CAAC;EACF,OAAOR,EAAE;AACX,CAAC;;AAED;AACA,OAAO,MAAMS,YAAY,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,QAAQ,KAAK;EACxD,MAAMX,EAAE,GAAG,MAAMD,YAAY,CAAC,CAAC;EAE/B,MAAMa,EAAE,GAAGZ,EAAE,CAACa,WAAW,CAAC,OAAO,EAAE,WAAW,CAAC;EAC/C,MAAMC,KAAK,GAAGF,EAAE,CAACR,WAAW,CAAC,OAAO,CAAC;;EAErC;EACA,IAAI;IACF,MAAMU,KAAK,CAACC,GAAG,CAAC;MAAEL,QAAQ;MAAEC;IAAS,CAAC,CAAC;IACvC,MAAMC,EAAE,CAACI,IAAI;IACbC,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;EAC7C,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdF,OAAO,CAACE,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,MAAMA,KAAK,CAAC,CAAC;EACf;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,SAAS,GAAG,MAAAA,CAAOV,QAAQ,EAAEC,QAAQ,KAAK;EACrD,MAAMX,EAAE,GAAG,MAAMD,YAAY,CAAC,CAAC;EAC/B,MAAMa,EAAE,GAAGZ,EAAE,CAACa,WAAW,CAAC,OAAO,EAAE,UAAU,CAAC;EAC9C,MAAMC,KAAK,GAAGF,EAAE,CAACR,WAAW,CAAC,OAAO,CAAC;EAErC,MAAMiB,IAAI,GAAG,MAAMP,KAAK,CAACQ,GAAG,CAACZ,QAAQ,CAAC;;EAEtC;EACA,IAAIW,IAAI,IAAIA,IAAI,CAACV,QAAQ,KAAKA,QAAQ,EAAE;IACtC,OAAO,IAAI,CAAC,CAAE;EAChB,CAAC,MAAM;IACL,OAAO,KAAK,CAAC,CAAC;EAChB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}