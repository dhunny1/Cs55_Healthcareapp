{"ast":null,"code":"import { openDB } from 'idb';\nexport const openDatabase = async () => {\n  try {\n    const db = await openDB('myDatabase', 1, upgradeDb => {\n      const objectStore = upgradeDb.createObjectStore('users', {\n        keyPath: 'username'\n      });\n      objectStore.createIndex('username', 'username', {\n        unique: true\n      });\n    });\n    return db; // Return the database object directly\n  } catch (error) {\n    console.error(\"Error opening database:\", error);\n    throw error; // Re-throw the error for handling in the calling function\n  }\n};\n\n// export const registerUser = async (username, password) => {\n//   const db = await openDatabase();\n//   const tx = db.transaction('users', 'readwrite');\n//   const store = tx.objectStore('users');\n//   store.add({ username, password: hashPassword(password) }); // Hash password before storing\n//   return tx.complete;\n// };\nasync function registerUser(username, password) {\n  try {\n    console.log(\"Attempting to open database...\");\n    const db = await openDB('myDatabase', 1, {\n      upgrade(db) {\n        if (!db.objectStoreNames.contains('users')) {\n          console.log(\"Creating object store...\");\n          const objectStore = db.createObjectStore('users', {\n            keyPath: 'username'\n          });\n          objectStore.createIndex('username', 'username', {\n            unique: true\n          });\n        } else {\n          console.log(\"Object store already exists.\");\n        }\n      }\n    });\n    console.log(\"Database opened successfully. Attempting to add user...\");\n    const tx = db.transaction('users', 'readwrite');\n    const store = tx.objectStore('users');\n    await store.add({\n      username,\n      password\n    });\n    await tx.done;\n    console.log(\"User added successfully:\", username);\n  } catch (error) {\n    if (error.name === \"ConstraintError\") {\n      console.error(\"Error: Username already exists.\");\n      throw new Error(\"Username already exists.\");\n    } else {\n      console.error(\"Error during registration:\", error);\n      throw new Error(\"An error occurred during registration.\");\n    }\n  }\n}\nexport const loginUser = async (username, password) => {\n  const db = await openDatabase();\n  const tx = db.transaction('users', 'readonly');\n  const store = tx.objectStore('users');\n  const user = await store.get(username);\n  if (user && verifyPassword(password, user.password)) {\n    return true; // Successful login\n  } else {\n    return false; // Invalid credentials\n  }\n};\n\n// Implement functions to hash and verify passwords (replace with your chosen hashing algorithm)\nfunction hashPassword(password) {\n  // Implement password hashing logic here (e.g., using bcrypt)\n  return \"hashedPassword\"; // Placeholder for actual hashed password\n}\nfunction verifyPassword(password, hashedPassword) {\n  // Implement password verification using the chosen hashing algorithm\n  return true; // Placeholder for actual verification logic\n}","map":{"version":3,"names":["openDB","openDatabase","db","upgradeDb","objectStore","createObjectStore","keyPath","createIndex","unique","error","console","registerUser","username","password","log","upgrade","objectStoreNames","contains","tx","transaction","store","add","done","name","Error","loginUser","user","get","verifyPassword","hashPassword","hashedPassword"],"sources":["C:/Users/Hjayb/OneDrive/Desktop/MyClass/Fall2024/InPersonClassess/CMSC355_FundamentalsSoftwareEngineer/Sprint2/healthcare_app/src/API/db.js"],"sourcesContent":["import { openDB } from 'idb';\r\n\r\nexport const openDatabase = async () => {\r\n  try {\r\n    const db = await openDB('myDatabase', 1, (upgradeDb) => {\r\n      const objectStore = upgradeDb.createObjectStore('users', { keyPath: 'username' });\r\n      objectStore.createIndex('username', 'username', { unique: true });\r\n    });\r\n    return db; // Return the database object directly\r\n  } catch (error) {\r\n    console.error(\"Error opening database:\", error);\r\n    throw error; // Re-throw the error for handling in the calling function\r\n  }\r\n};\r\n\r\n// export const registerUser = async (username, password) => {\r\n//   const db = await openDatabase();\r\n//   const tx = db.transaction('users', 'readwrite');\r\n//   const store = tx.objectStore('users');\r\n//   store.add({ username, password: hashPassword(password) }); // Hash password before storing\r\n//   return tx.complete;\r\n// };\r\nasync function registerUser(username, password) {\r\n    try {\r\n      console.log(\"Attempting to open database...\");\r\n      const db = await openDB('myDatabase', 1, {\r\n        upgrade(db) {\r\n          if (!db.objectStoreNames.contains('users')) {\r\n            console.log(\"Creating object store...\");\r\n            const objectStore = db.createObjectStore('users', { keyPath: 'username' });\r\n            objectStore.createIndex('username', 'username', { unique: true });\r\n          } else {\r\n            console.log(\"Object store already exists.\");\r\n          }\r\n        },\r\n      });\r\n  \r\n      console.log(\"Database opened successfully. Attempting to add user...\");\r\n      const tx = db.transaction('users', 'readwrite');\r\n      const store = tx.objectStore('users');\r\n      await store.add({ username, password });\r\n      await tx.done;\r\n  \r\n      console.log(\"User added successfully:\", username);\r\n    } catch (error) {\r\n      if (error.name === \"ConstraintError\") {\r\n        console.error(\"Error: Username already exists.\");\r\n        throw new Error(\"Username already exists.\");\r\n      } else {\r\n        console.error(\"Error during registration:\", error);\r\n        throw new Error(\"An error occurred during registration.\");\r\n      }\r\n    }\r\n  }\r\n  \r\n\r\n\r\n  \r\nexport const loginUser = async (username, password) => {\r\n  const db = await openDatabase();\r\n  const tx = db.transaction('users', 'readonly');\r\n  const store = tx.objectStore('users');\r\n  const user = await store.get(username);\r\n  if (user && verifyPassword(password, user.password)) {\r\n    return true; // Successful login\r\n  } else {\r\n    return false; // Invalid credentials\r\n  }\r\n};\r\n\r\n// Implement functions to hash and verify passwords (replace with your chosen hashing algorithm)\r\nfunction hashPassword(password) {\r\n  // Implement password hashing logic here (e.g., using bcrypt)\r\n  return \"hashedPassword\"; // Placeholder for actual hashed password\r\n}\r\n\r\nfunction verifyPassword(password, hashedPassword) {\r\n  // Implement password verification using the chosen hashing algorithm\r\n  return true; // Placeholder for actual verification logic\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}